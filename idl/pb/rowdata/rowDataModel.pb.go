// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: rowDataModel.proto

package rowdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrainingSummaryModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"training_id"
	TrainingId uint32 `protobuf:"varint,1,opt,name=TrainingId,proto3" json:"TrainingId,omitempty"`
	// @inject_tag: json:"training_name"
	TrainingName string `protobuf:"bytes,2,opt,name=TrainingName,proto3" json:"TrainingName,omitempty"`
	// @inject_tag: json:"training_date"
	TrainingDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=TrainingDate,proto3" json:"TrainingDate,omitempty"`
	// @inject_tag: json:"event_gender"
	EventGender string `protobuf:"bytes,4,opt,name=EventGender,proto3" json:"EventGender,omitempty"`
	// @inject_tag: json:"event_people_type"
	EventPeopleType string `protobuf:"bytes,5,opt,name=EventPeopleType,proto3" json:"EventPeopleType,omitempty"`
	// @inject_tag: json:"event_scale"
	EventScale string `protobuf:"bytes,6,opt,name=EventScale,proto3" json:"EventScale,omitempty"`
	// @inject_tag: json:"event"
	Event string `protobuf:"bytes,7,opt,name=Event,proto3" json:"Event,omitempty"`
	// @inject_tag: json:"weather"
	Weather string `protobuf:"bytes,8,opt,name=Weather,proto3" json:"Weather,omitempty"`
	// @inject_tag: json:"temp"
	Temp int32 `protobuf:"varint,9,opt,name=Temp,proto3" json:"Temp,omitempty"`
	// @inject_tag: json:"wind_dir"
	WindDir string `protobuf:"bytes,10,opt,name=WindDir,proto3" json:"WindDir,omitempty"`
	// @inject_tag: json:"loc"
	Loc string `protobuf:"bytes,11,opt,name=Loc,proto3" json:"Loc,omitempty"`
	// @inject_tag: json:"coach"
	Coach string `protobuf:"bytes,12,opt,name=Coach,proto3" json:"Coach,omitempty"`
	// @inject_tag: json:"sample_count"
	SampleCount int32 `protobuf:"varint,13,opt,name=SampleCount,proto3" json:"SampleCount,omitempty"`
	// @inject_tag: json:"remark"
	Remark string `protobuf:"bytes,14,opt,name=Remark,proto3" json:"Remark,omitempty"`
}

func (x *TrainingSummaryModel) Reset() {
	*x = TrainingSummaryModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rowDataModel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingSummaryModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingSummaryModel) ProtoMessage() {}

func (x *TrainingSummaryModel) ProtoReflect() protoreflect.Message {
	mi := &file_rowDataModel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingSummaryModel.ProtoReflect.Descriptor instead.
func (*TrainingSummaryModel) Descriptor() ([]byte, []int) {
	return file_rowDataModel_proto_rawDescGZIP(), []int{0}
}

func (x *TrainingSummaryModel) GetTrainingId() uint32 {
	if x != nil {
		return x.TrainingId
	}
	return 0
}

func (x *TrainingSummaryModel) GetTrainingName() string {
	if x != nil {
		return x.TrainingName
	}
	return ""
}

func (x *TrainingSummaryModel) GetTrainingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TrainingDate
	}
	return nil
}

func (x *TrainingSummaryModel) GetEventGender() string {
	if x != nil {
		return x.EventGender
	}
	return ""
}

func (x *TrainingSummaryModel) GetEventPeopleType() string {
	if x != nil {
		return x.EventPeopleType
	}
	return ""
}

func (x *TrainingSummaryModel) GetEventScale() string {
	if x != nil {
		return x.EventScale
	}
	return ""
}

func (x *TrainingSummaryModel) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *TrainingSummaryModel) GetWeather() string {
	if x != nil {
		return x.Weather
	}
	return ""
}

func (x *TrainingSummaryModel) GetTemp() int32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *TrainingSummaryModel) GetWindDir() string {
	if x != nil {
		return x.WindDir
	}
	return ""
}

func (x *TrainingSummaryModel) GetLoc() string {
	if x != nil {
		return x.Loc
	}
	return ""
}

func (x *TrainingSummaryModel) GetCoach() string {
	if x != nil {
		return x.Coach
	}
	return ""
}

func (x *TrainingSummaryModel) GetSampleCount() int32 {
	if x != nil {
		return x.SampleCount
	}
	return 0
}

func (x *TrainingSummaryModel) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type AthleteTrainingDataModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"athlete_training_id"
	AthleteTrainingId uint32 `protobuf:"varint,1,opt,name=AthleteTrainingId,proto3" json:"AthleteTrainingId,omitempty"`
	// @inject_tag: json:"training_id"
	TrainingId uint32 `protobuf:"varint,2,opt,name=TrainingId,proto3" json:"TrainingId,omitempty"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	// @inject_tag: json:"gender"
	Gender string `protobuf:"bytes,4,opt,name=Gender,proto3" json:"Gender,omitempty"`
	// @inject_tag: json:"seat"
	Seat int32 `protobuf:"varint,5,opt,name=Seat,proto3" json:"Seat,omitempty"`
	// @inject_tag: json:"side"
	Side int32 `protobuf:"varint,6,opt,name=Side,proto3" json:"Side,omitempty"`
	// @inject_tag: json:"height"
	Height float32 `protobuf:"fixed32,7,opt,name=Height,proto3" json:"Height,omitempty"`
	// @inject_tag: json:"weight"
	Weight float32 `protobuf:"fixed32,8,opt,name=Weight,proto3" json:"Weight,omitempty"`
	// @inject_tag: json:"oar_inboard"
	OarInboard float32 `protobuf:"fixed32,9,opt,name=OarInboard,proto3" json:"OarInboard,omitempty"`
	// @inject_tag: json:"oar_length"
	OarLength float32 `protobuf:"fixed32,10,opt,name=OarLength,proto3" json:"OarLength,omitempty"`
	// @inject_tag: json:"oar_blade_length"
	OarBladeLength float32 `protobuf:"fixed32,11,opt,name=OarBladeLength,proto3" json:"OarBladeLength,omitempty"`
}

func (x *AthleteTrainingDataModel) Reset() {
	*x = AthleteTrainingDataModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rowDataModel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AthleteTrainingDataModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthleteTrainingDataModel) ProtoMessage() {}

func (x *AthleteTrainingDataModel) ProtoReflect() protoreflect.Message {
	mi := &file_rowDataModel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthleteTrainingDataModel.ProtoReflect.Descriptor instead.
func (*AthleteTrainingDataModel) Descriptor() ([]byte, []int) {
	return file_rowDataModel_proto_rawDescGZIP(), []int{1}
}

func (x *AthleteTrainingDataModel) GetAthleteTrainingId() uint32 {
	if x != nil {
		return x.AthleteTrainingId
	}
	return 0
}

func (x *AthleteTrainingDataModel) GetTrainingId() uint32 {
	if x != nil {
		return x.TrainingId
	}
	return 0
}

func (x *AthleteTrainingDataModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AthleteTrainingDataModel) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *AthleteTrainingDataModel) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *AthleteTrainingDataModel) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *AthleteTrainingDataModel) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *AthleteTrainingDataModel) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *AthleteTrainingDataModel) GetOarInboard() float32 {
	if x != nil {
		return x.OarInboard
	}
	return 0
}

func (x *AthleteTrainingDataModel) GetOarLength() float32 {
	if x != nil {
		return x.OarLength
	}
	return 0
}

func (x *AthleteTrainingDataModel) GetOarBladeLength() float32 {
	if x != nil {
		return x.OarBladeLength
	}
	return 0
}

type SampleMetricsModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"athlete_training_id"
	AthleteTrainingId uint32 `protobuf:"varint,2,opt,name=athlete_training_id,json=athleteTrainingId,proto3" json:"athlete_training_id,omitempty"`
	// @inject_tag: json:"data_sample"
	DataSample string `protobuf:"bytes,3,opt,name=data_sample,json=dataSample,proto3" json:"data_sample,omitempty"`
	// @inject_tag: json:"stroke_rate"
	StrokeRate float64 `protobuf:"fixed64,4,opt,name=stroke_rate,json=strokeRate,proto3" json:"stroke_rate,omitempty"`
	// @inject_tag: json:"drive_time"
	DriveTime float64 `protobuf:"fixed64,5,opt,name=drive_time,json=driveTime,proto3" json:"drive_time,omitempty"`
	// @inject_tag: json:"rhythm"
	Rhythm float64 `protobuf:"fixed64,6,opt,name=rhythm,proto3" json:"rhythm,omitempty"`
	// @inject_tag: json:"catch_angle"
	CatchAngle float64 `protobuf:"fixed64,7,opt,name=catch_angle,json=catchAngle,proto3" json:"catch_angle,omitempty"`
	// @inject_tag: json:"finish_angle"
	FinishAngle float64 `protobuf:"fixed64,8,opt,name=finish_angle,json=finishAngle,proto3" json:"finish_angle,omitempty"`
	// @inject_tag: json:"total_angle"
	TotalAngle float64 `protobuf:"fixed64,9,opt,name=total_angle,json=totalAngle,proto3" json:"total_angle,omitempty"`
	// @inject_tag: json:"catch_slip"
	CatchSlip float64 `protobuf:"fixed64,10,opt,name=catch_slip,json=catchSlip,proto3" json:"catch_slip,omitempty"`
	// @inject_tag: json:"release_slip"
	ReleaseSlip float64 `protobuf:"fixed64,11,opt,name=release_slip,json=releaseSlip,proto3" json:"release_slip,omitempty"`
	// @inject_tag: json:"effective_angle_percent"
	EffectiveAnglePercent float64 `protobuf:"fixed64,12,opt,name=effective_angle_percent,json=effectiveAnglePercent,proto3" json:"effective_angle_percent,omitempty"`
	// @inject_tag: json:"max_blade_depth"
	MaxBladeDepth float64 `protobuf:"fixed64,13,opt,name=max_blade_depth,json=maxBladeDepth,proto3" json:"max_blade_depth,omitempty"`
	// @inject_tag: json:"blade_efficiency"
	BladeEfficiency float64 `protobuf:"fixed64,14,opt,name=blade_efficiency,json=bladeEfficiency,proto3" json:"blade_efficiency,omitempty"`
	// @inject_tag: json:"rowing_power"
	RowingPower float64 `protobuf:"fixed64,15,opt,name=rowing_power,json=rowingPower,proto3" json:"rowing_power,omitempty"`
	// @inject_tag: json:"work_per_stroke"
	WorkPerStroke float64 `protobuf:"fixed64,16,opt,name=work_per_stroke,json=workPerStroke,proto3" json:"work_per_stroke,omitempty"`
	// @inject_tag: json:"relative_wp_s"
	RelativeWpS float64 `protobuf:"fixed64,17,opt,name=relative_wp_s,json=relativeWpS,proto3" json:"relative_wp_s,omitempty"`
	// @inject_tag: json:"effective_angle_degree"
	EffectiveAngleDegree float64 `protobuf:"fixed64,18,opt,name=effective_angle_degree,json=effectiveAngleDegree,proto3" json:"effective_angle_degree,omitempty"`
	// @inject_tag: json:"target_angle"
	TargetAngle float64 `protobuf:"fixed64,19,opt,name=target_angle,json=targetAngle,proto3" json:"target_angle,omitempty"`
	// @inject_tag: json:"target_force"
	TargetForce float64 `protobuf:"fixed64,20,opt,name=target_force,json=targetForce,proto3" json:"target_force,omitempty"`
	// @inject_tag: json:"target_wp_s"
	TargetWpS float64 `protobuf:"fixed64,21,opt,name=target_wp_s,json=targetWpS,proto3" json:"target_wp_s,omitempty"`
	// @inject_tag: json:"angle_div_target"
	AngleDivTarget float64 `protobuf:"fixed64,22,opt,name=angle_div_target,json=angleDivTarget,proto3" json:"angle_div_target,omitempty"`
	// @inject_tag: json:"force_div_target"
	ForceDivTarget float64 `protobuf:"fixed64,23,opt,name=force_div_target,json=forceDivTarget,proto3" json:"force_div_target,omitempty"`
	// @inject_tag: json:"wp_s_div_target"
	WpSDivTarget float64 `protobuf:"fixed64,24,opt,name=wp_s_div_target,json=wpSDivTarget,proto3" json:"wp_s_div_target,omitempty"`
	// @inject_tag: json:"average_velocity"
	AverageVelocity float64 `protobuf:"fixed64,25,opt,name=average_velocity,json=averageVelocity,proto3" json:"average_velocity,omitempty"`
	// @inject_tag: json:"blade_specific_impulse"
	BladeSpecificImpulse float64 `protobuf:"fixed64,26,opt,name=blade_specific_impulse,json=bladeSpecificImpulse,proto3" json:"blade_specific_impulse,omitempty"`
	// @inject_tag: json:"time_over_2000m"
	TimeOver_2000M float64 `protobuf:"fixed64,27,opt,name=time_over_2000m,json=timeOver2000m,proto3" json:"time_over_2000m,omitempty"`
	// @inject_tag: json:"max_force"
	MaxForce float64 `protobuf:"fixed64,28,opt,name=max_force,json=maxForce,proto3" json:"max_force,omitempty"`
	// @inject_tag: json:"average_force"
	AverageForce float64 `protobuf:"fixed64,29,opt,name=average_force,json=averageForce,proto3" json:"average_force,omitempty"`
	// @inject_tag: json:"ratio_aver_div_max_force"
	RatioAverDivMaxForce float64 `protobuf:"fixed64,30,opt,name=ratio_aver_div_max_force,json=ratioAverDivMaxForce,proto3" json:"ratio_aver_div_max_force,omitempty"`
	// @inject_tag: json:"position_of_peak_force"
	PositionOfPeakForce float64 `protobuf:"fixed64,31,opt,name=position_of_peak_force,json=positionOfPeakForce,proto3" json:"position_of_peak_force,omitempty"`
	// @inject_tag: json:"catch_force_gradient"
	CatchForceGradient float64 `protobuf:"fixed64,32,opt,name=catch_force_gradient,json=catchForceGradient,proto3" json:"catch_force_gradient,omitempty"`
	// @inject_tag: json:"finish_force_gradient"
	FinishForceGradient float64 `protobuf:"fixed64,33,opt,name=finish_force_gradient,json=finishForceGradient,proto3" json:"finish_force_gradient,omitempty"`
	// @inject_tag: json:"max_handle_velocity"
	MaxHandleVelocity float64 `protobuf:"fixed64,34,opt,name=max_handle_velocity,json=maxHandleVelocity,proto3" json:"max_handle_velocity,omitempty"`
	// @inject_tag: json:"hdf"
	Hdf float64 `protobuf:"fixed64,35,opt,name=hdf,proto3" json:"hdf,omitempty"`
	// @inject_tag: json:"legs_drive"
	LegsDrive float64 `protobuf:"fixed64,36,opt,name=legs_drive,json=legsDrive,proto3" json:"legs_drive,omitempty"`
	// @inject_tag: json:"legs_max_speed"
	LegsMaxSpeed float64 `protobuf:"fixed64,37,opt,name=legs_max_speed,json=legsMaxSpeed,proto3" json:"legs_max_speed,omitempty"`
	// @inject_tag: json:"catch_factor"
	CatchFactor float64 `protobuf:"fixed64,38,opt,name=catch_factor,json=catchFactor,proto3" json:"catch_factor,omitempty"`
	// @inject_tag: json:"rowing_style_factor"
	RowingStyleFactor float64 `protobuf:"fixed64,39,opt,name=rowing_style_factor,json=rowingStyleFactor,proto3" json:"rowing_style_factor,omitempty"`
	// @inject_tag: json:"release_wash"
	ReleaseWash float64 `protobuf:"fixed64,40,opt,name=release_wash,json=releaseWash,proto3" json:"release_wash,omitempty"`
	// @inject_tag: json:"aver_force_div_weight"
	AverForceDivWeight float64 `protobuf:"fixed64,41,opt,name=aver_force_div_weight,json=averForceDivWeight,proto3" json:"aver_force_div_weight,omitempty"`
	// @inject_tag: json:"vseat_at_catch"
	VseatAtCatch float64 `protobuf:"fixed64,42,opt,name=vseat_at_catch,json=vseatAtCatch,proto3" json:"vseat_at_catch,omitempty"`
	// @inject_tag: json:"handle_travel_at_entry_force"
	HandleTravelAtEntryForce float64 `protobuf:"fixed64,43,opt,name=handle_travel_at_entry_force,json=handleTravelAtEntryForce,proto3" json:"handle_travel_at_entry_force,omitempty"`
	// @inject_tag: json:"handle_travel_at_70per_force"
	HandleTravelAt_70PerForce float64 `protobuf:"fixed64,44,opt,name=handle_travel_at_70per_force,json=handleTravelAt70perForce,proto3" json:"handle_travel_at_70per_force,omitempty"`
	// @inject_tag: json:"handle_travel_at_0as"
	HandleTravelAt_0As float64 `protobuf:"fixed64,45,opt,name=handle_travel_at_0as,json=handleTravelAt0as,proto3" json:"handle_travel_at_0as,omitempty"`
	// @inject_tag: json:"seat_travel_at_entry_force"
	SeatTravelAtEntryForce float64 `protobuf:"fixed64,46,opt,name=seat_travel_at_entry_force,json=seatTravelAtEntryForce,proto3" json:"seat_travel_at_entry_force,omitempty"`
	// @inject_tag: json:"seat_travel_at_70per_force"
	SeatTravelAt_70PerForce float64 `protobuf:"fixed64,47,opt,name=seat_travel_at_70per_force,json=seatTravelAt70perForce,proto3" json:"seat_travel_at_70per_force,omitempty"`
	// @inject_tag: json:"seat_travel_at_0as“
	SeatTravelAt_0As float64 `protobuf:"fixed64,48,opt,name=seat_travel_at_0as,json=seatTravelAt0as,proto3" json:"seat_travel_at_0as,omitempty"`
	// @inject_tag: json:"d_travel_at_entry_force_percent"
	DTravelAtEntryForcePercent float64 `protobuf:"fixed64,49,opt,name=d_travel_at_entry_force_percent,json=dTravelAtEntryForcePercent,proto3" json:"d_travel_at_entry_force_percent,omitempty"`
	// @inject_tag: json:"d_travel_at_70per_force_percent"
	DTravelAt_70PerForcePercent float64 `protobuf:"fixed64,50,opt,name=d_travel_at_70per_force_percent,json=dTravelAt70perForcePercent,proto3" json:"d_travel_at_70per_force_percent,omitempty"`
	// @inject_tag: json:"d_travel_at_0as_percent"
	DTravelAt_0AsPercent float64 `protobuf:"fixed64,51,opt,name=d_travel_at_0as_percent,json=dTravelAt0asPercent,proto3" json:"d_travel_at_0as_percent,omitempty"`
	// @inject_tag: json:"d_travel_at_entry_force_distance"
	DTravelAtEntryForceDistance float64 `protobuf:"fixed64,52,opt,name=d_travel_at_entry_force_distance,json=dTravelAtEntryForceDistance,proto3" json:"d_travel_at_entry_force_distance,omitempty"`
	// @inject_tag: json:"d_travel_at_70per_force_distance"
	DTravelAt_70PerForceDistance float64 `protobuf:"fixed64,53,opt,name=d_travel_at_70per_force_distance,json=dTravelAt70perForceDistance,proto3" json:"d_travel_at_70per_force_distance,omitempty"`
	// @inject_tag: json:"d_travel_at_0as_distance"
	DTravelAt_0AsDistance float64 `protobuf:"fixed64,54,opt,name=d_travel_at_0as_distance,json=dTravelAt0asDistance,proto3" json:"d_travel_at_0as_distance,omitempty"`
	// @inject_tag: json:"seat_on_recovery"
	SeatOnRecovery float64 `protobuf:"fixed64,55,opt,name=seat_on_recovery,json=seatOnRecovery,proto3" json:"seat_on_recovery,omitempty"`
	// @inject_tag: json:"vert_at_catch"
	VertAtCatch float64 `protobuf:"fixed64,56,opt,name=vert_at_catch,json=vertAtCatch,proto3" json:"vert_at_catch,omitempty"`
	// @inject_tag: json:"entry_force"
	EntryForce float64 `protobuf:"fixed64,57,opt,name=entry_force,json=entryForce,proto3" json:"entry_force,omitempty"`
	// @inject_tag: json:"force_upto_70per"
	ForceUpto_70Per float64 `protobuf:"fixed64,58,opt,name=force_upto_70per,json=forceUpto70per,proto3" json:"force_upto_70per,omitempty"`
	// @inject_tag: json:"max_vseat"
	MaxVseat float64 `protobuf:"fixed64,59,opt,name=max_vseat,json=maxVseat,proto3" json:"max_vseat,omitempty"`
	// @inject_tag: json:"peak_force"
	PeakForce float64 `protobuf:"fixed64,60,opt,name=peak_force,json=peakForce,proto3" json:"peak_force,omitempty"`
	// @inject_tag: json:"force_from_70per"
	ForceFrom_70Per float64 `protobuf:"fixed64,61,opt,name=force_from_70per,json=forceFrom70per,proto3" json:"force_from_70per,omitempty"`
	// @inject_tag: json:"vert_at_finish"
	VertAtFinish float64 `protobuf:"fixed64,62,opt,name=vert_at_finish,json=vertAtFinish,proto3" json:"vert_at_finish,omitempty"`
	// @inject_tag: json:"force_at_finish"
	ForceAtFinish float64 `protobuf:"fixed64,63,opt,name=force_at_finish,json=forceAtFinish,proto3" json:"force_at_finish,omitempty"`
	// @inject_tag: json:"average_boat_speed"
	AverageBoatSpeed float64 `protobuf:"fixed64,64,opt,name=average_boat_speed,json=averageBoatSpeed,proto3" json:"average_boat_speed,omitempty"`
	// @inject_tag: json:"minimal_boat_speed"
	MinimalBoatSpeed float64 `protobuf:"fixed64,65,opt,name=minimal_boat_speed,json=minimalBoatSpeed,proto3" json:"minimal_boat_speed,omitempty"`
	// @inject_tag: json:"maximal_boat_speed"
	MaximalBoatSpeed float64 `protobuf:"fixed64,66,opt,name=maximal_boat_speed,json=maximalBoatSpeed,proto3" json:"maximal_boat_speed,omitempty"`
	// @inject_tag: json:"distance_per_stroke"
	DistancePerStroke float64 `protobuf:"fixed64,67,opt,name=distance_per_stroke,json=distancePerStroke,proto3" json:"distance_per_stroke,omitempty"`
	// @inject_tag: json:"drag_factor"
	DragFactor float64 `protobuf:"fixed64,68,opt,name=drag_factor,json=dragFactor,proto3" json:"drag_factor,omitempty"`
	// @inject_tag: json:"wind_forward_comp_rel_water"
	WindForwardCompRelWater float64 `protobuf:"fixed64,69,opt,name=wind_forward_comp_rel_water,json=windForwardCompRelWater,proto3" json:"wind_forward_comp_rel_water,omitempty"`
	// @inject_tag: json:"wind_direction_rel_water"
	WindDirectionRelWater float64 `protobuf:"fixed64,70,opt,name=wind_direction_rel_water,json=windDirectionRelWater,proto3" json:"wind_direction_rel_water,omitempty"`
	// @inject_tag: json:"time_250m"
	Time_250M float64 `protobuf:"fixed64,71,opt,name=time_250m,json=time250m,proto3" json:"time_250m,omitempty"`
	// @inject_tag: json:"boat_speed_efficiency"
	BoatSpeedEfficiency float64 `protobuf:"fixed64,72,opt,name=boat_speed_efficiency,json=boatSpeedEfficiency,proto3" json:"boat_speed_efficiency,omitempty"`
	// @inject_tag: json:"time_at_water_temp_25deg"
	TimeAtWaterTemp_25Deg float64 `protobuf:"fixed64,73,opt,name=time_at_water_temp_25deg,json=timeAtWaterTemp25deg,proto3" json:"time_at_water_temp_25deg,omitempty"`
	// @inject_tag: json:"boat_speed_variation"
	BoatSpeedVariation float64 `protobuf:"fixed64,74,opt,name=boat_speed_variation,json=boatSpeedVariation,proto3" json:"boat_speed_variation,omitempty"`
	// @inject_tag: json:"wind_speed_rel_boat"
	WindSpeedRelBoat float64 `protobuf:"fixed64,75,opt,name=wind_speed_rel_boat,json=windSpeedRelBoat,proto3" json:"wind_speed_rel_boat,omitempty"`
	// @inject_tag: json:"wind_direction_rel_boat"
	WindDirectionRelBoat float64 `protobuf:"fixed64,76,opt,name=wind_direction_rel_boat,json=windDirectionRelBoat,proto3" json:"wind_direction_rel_boat,omitempty"`
	// @inject_tag: json:"acceleration_minimun"
	AccelerationMinimun float64 `protobuf:"fixed64,77,opt,name=acceleration_minimun,json=accelerationMinimun,proto3" json:"acceleration_minimun,omitempty"`
	// @inject_tag: json:"acceleration_maximum"
	AccelerationMaximum float64 `protobuf:"fixed64,78,opt,name=acceleration_maximum,json=accelerationMaximum,proto3" json:"acceleration_maximum,omitempty"`
	// @inject_tag: json:"model_speed"
	ModelSpeed float64 `protobuf:"fixed64,79,opt,name=model_speed,json=modelSpeed,proto3" json:"model_speed,omitempty"`
	// @inject_tag: json:"effective_work_per_stroke"
	EffectiveWorkPerStroke float64 `protobuf:"fixed64,80,opt,name=effective_work_per_stroke,json=effectiveWorkPerStroke,proto3" json:"effective_work_per_stroke,omitempty"`
	// @inject_tag: json:"model_dps"
	ModelDps float64 `protobuf:"fixed64,81,opt,name=model_dps,json=modelDps,proto3" json:"model_dps,omitempty"`
	// @inject_tag: json:"propulsive_power"
	PropulsivePower float64 `protobuf:"fixed64,82,opt,name=propulsive_power,json=propulsivePower,proto3" json:"propulsive_power,omitempty"`
	// @inject_tag: json:"drive_maximal_at"
	DriveMaximalAt float64 `protobuf:"fixed64,83,opt,name=drive_maximal_at,json=driveMaximalAt,proto3" json:"drive_maximal_at,omitempty"`
	// @inject_tag: json:"first_peak"
	FirstPeak float64 `protobuf:"fixed64,84,opt,name=first_peak,json=firstPeak,proto3" json:"first_peak,omitempty"`
	// @inject_tag: json:"zerso_before_catch"
	ZeroBeforeCatch float64 `protobuf:"fixed64,85,opt,name=zero_before_catch,json=zeroBeforeCatch,proto3" json:"zero_before_catch,omitempty"`
	// @inject_tag: json:"minimal_from_catch"
	MinimalFromCatch float64 `protobuf:"fixed64,86,opt,name=minimal_from_catch,json=minimalFromCatch,proto3" json:"minimal_from_catch,omitempty"`
	// @inject_tag: json:"zero_after_catch"
	ZeroAfterCatch float64 `protobuf:"fixed64,87,opt,name=zero_after_catch,json=zeroAfterCatch,proto3" json:"zero_after_catch,omitempty"`
	// @inject_tag: json:"std_deviation"
	StdDeviation float64 `protobuf:"fixed64,88,opt,name=std_deviation,json=stdDeviation,proto3" json:"std_deviation,omitempty"`
	// @inject_tag: json:"oar_angle"
	OarAngle []float64 `protobuf:"fixed64,89,rep,packed,name=oar_angle,json=oarAngle,proto3" json:"oar_angle,omitempty"`
	// @inject_tag: json:"handle_force"
	HandleForce []float64 `protobuf:"fixed64,90,rep,packed,name=handle_force,json=handleForce,proto3" json:"handle_force,omitempty"`
	// @inject_tag: json:"vertical_angle_boat_roll"
	VerticalAngleBoatRoll []float64 `protobuf:"fixed64,91,rep,packed,name=vertical_angle_boat_roll,json=verticalAngleBoatRoll,proto3" json:"vertical_angle_boat_roll,omitempty"`
	// @inject_tag: json:"legs_velocity"
	LegsVelocity []float64 `protobuf:"fixed64,92,rep,packed,name=legs_velocity,json=legsVelocity,proto3" json:"legs_velocity,omitempty"`
	// @inject_tag: json:"handle_speed"
	HandleSpeed []float64 `protobuf:"fixed64,93,rep,packed,name=handle_speed,json=handleSpeed,proto3" json:"handle_speed,omitempty"`
	// @inject_tag: json:"hdf_fig"
	HdfFig []float64 `protobuf:"fixed64,94,rep,packed,name=hdf_fig,json=hdfFig,proto3" json:"hdf_fig,omitempty"`
	// @inject_tag: json:"blade_df"
	BladeDf []float64 `protobuf:"fixed64,95,rep,packed,name=blade_df,json=bladeDf,proto3" json:"blade_df,omitempty"`
	// @inject_tag: json:"velocity"
	Velocity []float64 `protobuf:"fixed64,96,rep,packed,name=velocity,proto3" json:"velocity,omitempty"`
	// @inject_tag: json:"boat_acceleration"
	BoatAcceleration []float64 `protobuf:"fixed64,97,rep,packed,name=boat_acceleration,json=boatAcceleration,proto3" json:"boat_acceleration,omitempty"`
	// @inject_tag: json:"velocity_rel"
	VelocityRel []float64 `protobuf:"fixed64,98,rep,packed,name=velocity_rel,json=velocityRel,proto3" json:"velocity_rel,omitempty"`
	// @inject_tag: json:"drag_factor_f"
	DragFactorF float64 `protobuf:"fixed64,99,opt,name=drag_factor_f,json=dragFactorF,proto3" json:"drag_factor_f,omitempty"`
	// @inject_tag: json:"drag_factor_pprop"
	DragFactorPprop float64 `protobuf:"fixed64,100,opt,name=drag_factor_pprop,json=dragFactorPprop,proto3" json:"drag_factor_pprop,omitempty"`
	// @inject_tag: json:"drag_factor_pold"
	DragFactorPold float64 `protobuf:"fixed64,101,opt,name=drag_factor_pold,json=dragFactorPold,proto3" json:"drag_factor_pold,omitempty"`
	// @inject_tag: json:"drag_factor_ptot"
	DragFactorPtot float64 `protobuf:"fixed64,102,opt,name=drag_factor_ptot,json=dragFactorPtot,proto3" json:"drag_factor_ptot,omitempty"`
}

func (x *SampleMetricsModel) Reset() {
	*x = SampleMetricsModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rowDataModel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleMetricsModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleMetricsModel) ProtoMessage() {}

func (x *SampleMetricsModel) ProtoReflect() protoreflect.Message {
	mi := &file_rowDataModel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleMetricsModel.ProtoReflect.Descriptor instead.
func (*SampleMetricsModel) Descriptor() ([]byte, []int) {
	return file_rowDataModel_proto_rawDescGZIP(), []int{2}
}

func (x *SampleMetricsModel) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SampleMetricsModel) GetAthleteTrainingId() uint32 {
	if x != nil {
		return x.AthleteTrainingId
	}
	return 0
}

func (x *SampleMetricsModel) GetDataSample() string {
	if x != nil {
		return x.DataSample
	}
	return ""
}

func (x *SampleMetricsModel) GetStrokeRate() float64 {
	if x != nil {
		return x.StrokeRate
	}
	return 0
}

func (x *SampleMetricsModel) GetDriveTime() float64 {
	if x != nil {
		return x.DriveTime
	}
	return 0
}

func (x *SampleMetricsModel) GetRhythm() float64 {
	if x != nil {
		return x.Rhythm
	}
	return 0
}

func (x *SampleMetricsModel) GetCatchAngle() float64 {
	if x != nil {
		return x.CatchAngle
	}
	return 0
}

func (x *SampleMetricsModel) GetFinishAngle() float64 {
	if x != nil {
		return x.FinishAngle
	}
	return 0
}

func (x *SampleMetricsModel) GetTotalAngle() float64 {
	if x != nil {
		return x.TotalAngle
	}
	return 0
}

func (x *SampleMetricsModel) GetCatchSlip() float64 {
	if x != nil {
		return x.CatchSlip
	}
	return 0
}

func (x *SampleMetricsModel) GetReleaseSlip() float64 {
	if x != nil {
		return x.ReleaseSlip
	}
	return 0
}

func (x *SampleMetricsModel) GetEffectiveAnglePercent() float64 {
	if x != nil {
		return x.EffectiveAnglePercent
	}
	return 0
}

func (x *SampleMetricsModel) GetMaxBladeDepth() float64 {
	if x != nil {
		return x.MaxBladeDepth
	}
	return 0
}

func (x *SampleMetricsModel) GetBladeEfficiency() float64 {
	if x != nil {
		return x.BladeEfficiency
	}
	return 0
}

func (x *SampleMetricsModel) GetRowingPower() float64 {
	if x != nil {
		return x.RowingPower
	}
	return 0
}

func (x *SampleMetricsModel) GetWorkPerStroke() float64 {
	if x != nil {
		return x.WorkPerStroke
	}
	return 0
}

func (x *SampleMetricsModel) GetRelativeWpS() float64 {
	if x != nil {
		return x.RelativeWpS
	}
	return 0
}

func (x *SampleMetricsModel) GetEffectiveAngleDegree() float64 {
	if x != nil {
		return x.EffectiveAngleDegree
	}
	return 0
}

func (x *SampleMetricsModel) GetTargetAngle() float64 {
	if x != nil {
		return x.TargetAngle
	}
	return 0
}

func (x *SampleMetricsModel) GetTargetForce() float64 {
	if x != nil {
		return x.TargetForce
	}
	return 0
}

func (x *SampleMetricsModel) GetTargetWpS() float64 {
	if x != nil {
		return x.TargetWpS
	}
	return 0
}

func (x *SampleMetricsModel) GetAngleDivTarget() float64 {
	if x != nil {
		return x.AngleDivTarget
	}
	return 0
}

func (x *SampleMetricsModel) GetForceDivTarget() float64 {
	if x != nil {
		return x.ForceDivTarget
	}
	return 0
}

func (x *SampleMetricsModel) GetWpSDivTarget() float64 {
	if x != nil {
		return x.WpSDivTarget
	}
	return 0
}

func (x *SampleMetricsModel) GetAverageVelocity() float64 {
	if x != nil {
		return x.AverageVelocity
	}
	return 0
}

func (x *SampleMetricsModel) GetBladeSpecificImpulse() float64 {
	if x != nil {
		return x.BladeSpecificImpulse
	}
	return 0
}

func (x *SampleMetricsModel) GetTimeOver_2000M() float64 {
	if x != nil {
		return x.TimeOver_2000M
	}
	return 0
}

func (x *SampleMetricsModel) GetMaxForce() float64 {
	if x != nil {
		return x.MaxForce
	}
	return 0
}

func (x *SampleMetricsModel) GetAverageForce() float64 {
	if x != nil {
		return x.AverageForce
	}
	return 0
}

func (x *SampleMetricsModel) GetRatioAverDivMaxForce() float64 {
	if x != nil {
		return x.RatioAverDivMaxForce
	}
	return 0
}

func (x *SampleMetricsModel) GetPositionOfPeakForce() float64 {
	if x != nil {
		return x.PositionOfPeakForce
	}
	return 0
}

func (x *SampleMetricsModel) GetCatchForceGradient() float64 {
	if x != nil {
		return x.CatchForceGradient
	}
	return 0
}

func (x *SampleMetricsModel) GetFinishForceGradient() float64 {
	if x != nil {
		return x.FinishForceGradient
	}
	return 0
}

func (x *SampleMetricsModel) GetMaxHandleVelocity() float64 {
	if x != nil {
		return x.MaxHandleVelocity
	}
	return 0
}

func (x *SampleMetricsModel) GetHdf() float64 {
	if x != nil {
		return x.Hdf
	}
	return 0
}

func (x *SampleMetricsModel) GetLegsDrive() float64 {
	if x != nil {
		return x.LegsDrive
	}
	return 0
}

func (x *SampleMetricsModel) GetLegsMaxSpeed() float64 {
	if x != nil {
		return x.LegsMaxSpeed
	}
	return 0
}

func (x *SampleMetricsModel) GetCatchFactor() float64 {
	if x != nil {
		return x.CatchFactor
	}
	return 0
}

func (x *SampleMetricsModel) GetRowingStyleFactor() float64 {
	if x != nil {
		return x.RowingStyleFactor
	}
	return 0
}

func (x *SampleMetricsModel) GetReleaseWash() float64 {
	if x != nil {
		return x.ReleaseWash
	}
	return 0
}

func (x *SampleMetricsModel) GetAverForceDivWeight() float64 {
	if x != nil {
		return x.AverForceDivWeight
	}
	return 0
}

func (x *SampleMetricsModel) GetVseatAtCatch() float64 {
	if x != nil {
		return x.VseatAtCatch
	}
	return 0
}

func (x *SampleMetricsModel) GetHandleTravelAtEntryForce() float64 {
	if x != nil {
		return x.HandleTravelAtEntryForce
	}
	return 0
}

func (x *SampleMetricsModel) GetHandleTravelAt_70PerForce() float64 {
	if x != nil {
		return x.HandleTravelAt_70PerForce
	}
	return 0
}

func (x *SampleMetricsModel) GetHandleTravelAt_0As() float64 {
	if x != nil {
		return x.HandleTravelAt_0As
	}
	return 0
}

func (x *SampleMetricsModel) GetSeatTravelAtEntryForce() float64 {
	if x != nil {
		return x.SeatTravelAtEntryForce
	}
	return 0
}

func (x *SampleMetricsModel) GetSeatTravelAt_70PerForce() float64 {
	if x != nil {
		return x.SeatTravelAt_70PerForce
	}
	return 0
}

func (x *SampleMetricsModel) GetSeatTravelAt_0As() float64 {
	if x != nil {
		return x.SeatTravelAt_0As
	}
	return 0
}

func (x *SampleMetricsModel) GetDTravelAtEntryForcePercent() float64 {
	if x != nil {
		return x.DTravelAtEntryForcePercent
	}
	return 0
}

func (x *SampleMetricsModel) GetDTravelAt_70PerForcePercent() float64 {
	if x != nil {
		return x.DTravelAt_70PerForcePercent
	}
	return 0
}

func (x *SampleMetricsModel) GetDTravelAt_0AsPercent() float64 {
	if x != nil {
		return x.DTravelAt_0AsPercent
	}
	return 0
}

func (x *SampleMetricsModel) GetDTravelAtEntryForceDistance() float64 {
	if x != nil {
		return x.DTravelAtEntryForceDistance
	}
	return 0
}

func (x *SampleMetricsModel) GetDTravelAt_70PerForceDistance() float64 {
	if x != nil {
		return x.DTravelAt_70PerForceDistance
	}
	return 0
}

func (x *SampleMetricsModel) GetDTravelAt_0AsDistance() float64 {
	if x != nil {
		return x.DTravelAt_0AsDistance
	}
	return 0
}

func (x *SampleMetricsModel) GetSeatOnRecovery() float64 {
	if x != nil {
		return x.SeatOnRecovery
	}
	return 0
}

func (x *SampleMetricsModel) GetVertAtCatch() float64 {
	if x != nil {
		return x.VertAtCatch
	}
	return 0
}

func (x *SampleMetricsModel) GetEntryForce() float64 {
	if x != nil {
		return x.EntryForce
	}
	return 0
}

func (x *SampleMetricsModel) GetForceUpto_70Per() float64 {
	if x != nil {
		return x.ForceUpto_70Per
	}
	return 0
}

func (x *SampleMetricsModel) GetMaxVseat() float64 {
	if x != nil {
		return x.MaxVseat
	}
	return 0
}

func (x *SampleMetricsModel) GetPeakForce() float64 {
	if x != nil {
		return x.PeakForce
	}
	return 0
}

func (x *SampleMetricsModel) GetForceFrom_70Per() float64 {
	if x != nil {
		return x.ForceFrom_70Per
	}
	return 0
}

func (x *SampleMetricsModel) GetVertAtFinish() float64 {
	if x != nil {
		return x.VertAtFinish
	}
	return 0
}

func (x *SampleMetricsModel) GetForceAtFinish() float64 {
	if x != nil {
		return x.ForceAtFinish
	}
	return 0
}

func (x *SampleMetricsModel) GetAverageBoatSpeed() float64 {
	if x != nil {
		return x.AverageBoatSpeed
	}
	return 0
}

func (x *SampleMetricsModel) GetMinimalBoatSpeed() float64 {
	if x != nil {
		return x.MinimalBoatSpeed
	}
	return 0
}

func (x *SampleMetricsModel) GetMaximalBoatSpeed() float64 {
	if x != nil {
		return x.MaximalBoatSpeed
	}
	return 0
}

func (x *SampleMetricsModel) GetDistancePerStroke() float64 {
	if x != nil {
		return x.DistancePerStroke
	}
	return 0
}

func (x *SampleMetricsModel) GetDragFactor() float64 {
	if x != nil {
		return x.DragFactor
	}
	return 0
}

func (x *SampleMetricsModel) GetWindForwardCompRelWater() float64 {
	if x != nil {
		return x.WindForwardCompRelWater
	}
	return 0
}

func (x *SampleMetricsModel) GetWindDirectionRelWater() float64 {
	if x != nil {
		return x.WindDirectionRelWater
	}
	return 0
}

func (x *SampleMetricsModel) GetTime_250M() float64 {
	if x != nil {
		return x.Time_250M
	}
	return 0
}

func (x *SampleMetricsModel) GetBoatSpeedEfficiency() float64 {
	if x != nil {
		return x.BoatSpeedEfficiency
	}
	return 0
}

func (x *SampleMetricsModel) GetTimeAtWaterTemp_25Deg() float64 {
	if x != nil {
		return x.TimeAtWaterTemp_25Deg
	}
	return 0
}

func (x *SampleMetricsModel) GetBoatSpeedVariation() float64 {
	if x != nil {
		return x.BoatSpeedVariation
	}
	return 0
}

func (x *SampleMetricsModel) GetWindSpeedRelBoat() float64 {
	if x != nil {
		return x.WindSpeedRelBoat
	}
	return 0
}

func (x *SampleMetricsModel) GetWindDirectionRelBoat() float64 {
	if x != nil {
		return x.WindDirectionRelBoat
	}
	return 0
}

func (x *SampleMetricsModel) GetAccelerationMinimun() float64 {
	if x != nil {
		return x.AccelerationMinimun
	}
	return 0
}

func (x *SampleMetricsModel) GetAccelerationMaximum() float64 {
	if x != nil {
		return x.AccelerationMaximum
	}
	return 0
}

func (x *SampleMetricsModel) GetModelSpeed() float64 {
	if x != nil {
		return x.ModelSpeed
	}
	return 0
}

func (x *SampleMetricsModel) GetEffectiveWorkPerStroke() float64 {
	if x != nil {
		return x.EffectiveWorkPerStroke
	}
	return 0
}

func (x *SampleMetricsModel) GetModelDps() float64 {
	if x != nil {
		return x.ModelDps
	}
	return 0
}

func (x *SampleMetricsModel) GetPropulsivePower() float64 {
	if x != nil {
		return x.PropulsivePower
	}
	return 0
}

func (x *SampleMetricsModel) GetDriveMaximalAt() float64 {
	if x != nil {
		return x.DriveMaximalAt
	}
	return 0
}

func (x *SampleMetricsModel) GetFirstPeak() float64 {
	if x != nil {
		return x.FirstPeak
	}
	return 0
}

func (x *SampleMetricsModel) GetZeroBeforeCatch() float64 {
	if x != nil {
		return x.ZeroBeforeCatch
	}
	return 0
}

func (x *SampleMetricsModel) GetMinimalFromCatch() float64 {
	if x != nil {
		return x.MinimalFromCatch
	}
	return 0
}

func (x *SampleMetricsModel) GetZeroAfterCatch() float64 {
	if x != nil {
		return x.ZeroAfterCatch
	}
	return 0
}

func (x *SampleMetricsModel) GetStdDeviation() float64 {
	if x != nil {
		return x.StdDeviation
	}
	return 0
}

func (x *SampleMetricsModel) GetOarAngle() []float64 {
	if x != nil {
		return x.OarAngle
	}
	return nil
}

func (x *SampleMetricsModel) GetHandleForce() []float64 {
	if x != nil {
		return x.HandleForce
	}
	return nil
}

func (x *SampleMetricsModel) GetVerticalAngleBoatRoll() []float64 {
	if x != nil {
		return x.VerticalAngleBoatRoll
	}
	return nil
}

func (x *SampleMetricsModel) GetLegsVelocity() []float64 {
	if x != nil {
		return x.LegsVelocity
	}
	return nil
}

func (x *SampleMetricsModel) GetHandleSpeed() []float64 {
	if x != nil {
		return x.HandleSpeed
	}
	return nil
}

func (x *SampleMetricsModel) GetHdfFig() []float64 {
	if x != nil {
		return x.HdfFig
	}
	return nil
}

func (x *SampleMetricsModel) GetBladeDf() []float64 {
	if x != nil {
		return x.BladeDf
	}
	return nil
}

func (x *SampleMetricsModel) GetVelocity() []float64 {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *SampleMetricsModel) GetBoatAcceleration() []float64 {
	if x != nil {
		return x.BoatAcceleration
	}
	return nil
}

func (x *SampleMetricsModel) GetVelocityRel() []float64 {
	if x != nil {
		return x.VelocityRel
	}
	return nil
}

func (x *SampleMetricsModel) GetDragFactorF() float64 {
	if x != nil {
		return x.DragFactorF
	}
	return 0
}

func (x *SampleMetricsModel) GetDragFactorPprop() float64 {
	if x != nil {
		return x.DragFactorPprop
	}
	return 0
}

func (x *SampleMetricsModel) GetDragFactorPold() float64 {
	if x != nil {
		return x.DragFactorPold
	}
	return 0
}

func (x *SampleMetricsModel) GetDragFactorPtot() float64 {
	if x != nil {
		return x.DragFactorPtot
	}
	return 0
}

var File_rowDataModel_proto protoreflect.FileDescriptor

var file_rowDataModel_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x69, 0x64, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x03, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x44,
	0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x44, 0x69,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4c, 0x6f, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0xd2, 0x02, 0x0a, 0x18, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x2c, 0x0a, 0x11, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x41, 0x74, 0x68,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x61, 0x72, 0x49, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x4f, 0x61, 0x72, 0x49, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4f, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x61, 0x72, 0x42, 0x6c, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x4f, 0x61, 0x72, 0x42, 0x6c, 0x61,
	0x64, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xbe, 0x22, 0x0a, 0x12, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x63, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6c, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6c, 0x69, 0x70, 0x12,
	0x36, 0x0a, 0x17, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x6c, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x61, 0x64, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x29, 0x0a, 0x10, 0x62, 0x6c, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x6c, 0x61, 0x64, 0x65,
	0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x77, 0x70, 0x5f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x70, 0x53, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x70, 0x5f, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x57, 0x70, 0x53, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x64,
	0x69, 0x76, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x76, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x44, 0x69, 0x76, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x77, 0x70, 0x5f,
	0x73, 0x5f, 0x64, 0x69, 0x76, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x77, 0x70, 0x53, 0x44, 0x69, 0x76, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x62,
	0x6c, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6d,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x62, 0x6c, 0x61,
	0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x32,
	0x30, 0x30, 0x30, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x32, 0x30, 0x30, 0x30, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x41, 0x76, 0x65, 0x72, 0x44, 0x69, 0x76, 0x4d, 0x61, 0x78, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x50,
	0x65, 0x61, 0x6b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x68, 0x64, 0x66, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x68, 0x64, 0x66,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x73, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x73, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x67, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x73, 0x4d, 0x61, 0x78,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x57, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x61,
	0x76, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x76, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x76, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x76, 0x73, 0x65, 0x61, 0x74, 0x41, 0x74, 0x43,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x1c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x37, 0x30, 0x70, 0x65, 0x72, 0x5f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x37, 0x30, 0x70, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x30, 0x61, 0x73, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x41, 0x74, 0x30, 0x61, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x73, 0x65, 0x61, 0x74, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x5f, 0x61, 0x74, 0x5f, 0x37, 0x30, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x73, 0x65, 0x61, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x41, 0x74, 0x37, 0x30, 0x70, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x12, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f,
	0x30, 0x61, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x30, 0x61, 0x73, 0x12, 0x43, 0x0a, 0x1f, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x64, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x43, 0x0a, 0x1f, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x37,
	0x30, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x64, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x41, 0x74, 0x37, 0x30, 0x70, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x5f, 0x61, 0x74, 0x5f, 0x30, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x64, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x41, 0x74,
	0x30, 0x61, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x20, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x64, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x45, 0x0a, 0x20, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74,
	0x5f, 0x37, 0x30, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x64, 0x54, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x37, 0x30, 0x70, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x30, 0x61, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x64, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x41, 0x74, 0x30, 0x61, 0x73, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x74,
	0x4f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x65,
	0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x74, 0x41, 0x74, 0x43, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x74, 0x6f, 0x5f, 0x37, 0x30,
	0x70, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x55, 0x70, 0x74, 0x6f, 0x37, 0x30, 0x70, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x73, 0x65, 0x61, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x56, 0x73, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x65, 0x61, 0x6b,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x37, 0x30, 0x70, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x37, 0x30, 0x70, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x74, 0x41, 0x74, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x61, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x42, 0x6f, 0x61, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x6f,
	0x61, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x61, 0x67, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x72,
	0x61, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x1b, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x72, 0x65,
	0x6c, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x77,
	0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x52, 0x65,
	0x6c, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x32, 0x35, 0x30, 0x6d, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x35, 0x30, 0x6d, 0x12, 0x32, 0x0a, 0x15,
	0x62, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x48, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x62, 0x6f, 0x61,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x36, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x32, 0x35, 0x64, 0x65, 0x67, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x32, 0x35, 0x64, 0x65, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6f, 0x61, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x62, 0x6f, 0x61, 0x74, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x69,
	0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x62, 0x6f, 0x61,
	0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x6c, 0x42, 0x6f, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x77, 0x69, 0x6e,
	0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x5f,
	0x62, 0x6f, 0x61, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x77, 0x69, 0x6e, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x42, 0x6f, 0x61, 0x74,
	0x12, 0x31, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6e, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x70, 0x73, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x70, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x75, 0x6c, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x75,
	0x6c, 0x73, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x61, 0x6c, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x65,
	0x61, 0x6b, 0x18, 0x54, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x65, 0x61, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x18, 0x55, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x7a, 0x65, 0x72, 0x6f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x63, 0x61, 0x74, 0x63, 0x68, 0x18, 0x56, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a,
	0x10, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x57, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x7a, 0x65, 0x72, 0x6f, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x64, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x09,
	0x6f, 0x61, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x59, 0x20, 0x03, 0x28, 0x01, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x61, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x5a, 0x20,
	0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x18, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c,
	0x18, 0x5b, 0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x15, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6f, 0x61, 0x74, 0x52, 0x6f, 0x6c,
	0x6c, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x73, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x5c, 0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x6c, 0x65,
	0x67, 0x73, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0c, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x5d, 0x20, 0x03, 0x28, 0x01,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x07, 0x68, 0x64, 0x66, 0x5f, 0x66, 0x69, 0x67, 0x18, 0x5e, 0x20, 0x03,
	0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x68, 0x64, 0x66, 0x46, 0x69, 0x67, 0x12, 0x1d,
	0x0a, 0x08, 0x62, 0x6c, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x66, 0x18, 0x5f, 0x20, 0x03, 0x28, 0x01,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x07, 0x62, 0x6c, 0x61, 0x64, 0x65, 0x44, 0x66, 0x12, 0x1e, 0x0a,
	0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x60, 0x20, 0x03, 0x28, 0x01, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a,
	0x11, 0x62, 0x6f, 0x61, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x61, 0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x10, 0x62, 0x6f,
	0x61, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0c, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x18, 0x62,
	0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x67, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x18, 0x63, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x72,
	0x61, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x72, 0x61,
	0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x72, 0x61, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x70, 0x72, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x72, 0x61, 0x67, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x64, 0x72, 0x61, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x6c, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x64, 0x72, 0x61, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70,
	0x74, 0x6f, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x72, 0x61, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x74, 0x6f, 0x74, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x70,
	0x62, 0x2f, 0x72, 0x6f, 0x77, 0x64, 0x61, 0x74, 0x61, 0x3b, 0x72, 0x6f, 0x77, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rowDataModel_proto_rawDescOnce sync.Once
	file_rowDataModel_proto_rawDescData = file_rowDataModel_proto_rawDesc
)

func file_rowDataModel_proto_rawDescGZIP() []byte {
	file_rowDataModel_proto_rawDescOnce.Do(func() {
		file_rowDataModel_proto_rawDescData = protoimpl.X.CompressGZIP(file_rowDataModel_proto_rawDescData)
	})
	return file_rowDataModel_proto_rawDescData
}

var file_rowDataModel_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_rowDataModel_proto_goTypes = []interface{}{
	(*TrainingSummaryModel)(nil),     // 0: idl.TrainingSummaryModel
	(*AthleteTrainingDataModel)(nil), // 1: idl.AthleteTrainingDataModel
	(*SampleMetricsModel)(nil),       // 2: idl.SampleMetricsModel
	(*timestamppb.Timestamp)(nil),    // 3: google.protobuf.Timestamp
}
var file_rowDataModel_proto_depIdxs = []int32{
	3, // 0: idl.TrainingSummaryModel.TrainingDate:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_rowDataModel_proto_init() }
func file_rowDataModel_proto_init() {
	if File_rowDataModel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rowDataModel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingSummaryModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rowDataModel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AthleteTrainingDataModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rowDataModel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleMetricsModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rowDataModel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rowDataModel_proto_goTypes,
		DependencyIndexes: file_rowDataModel_proto_depIdxs,
		MessageInfos:      file_rowDataModel_proto_msgTypes,
	}.Build()
	File_rowDataModel_proto = out.File
	file_rowDataModel_proto_rawDesc = nil
	file_rowDataModel_proto_goTypes = nil
	file_rowDataModel_proto_depIdxs = nil
}
