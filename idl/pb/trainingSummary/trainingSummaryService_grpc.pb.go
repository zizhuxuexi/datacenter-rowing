// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: idl/trainingSummaryService.proto

package trainingSummary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainingSummaryServiceClient is the client API for TrainingSummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingSummaryServiceClient interface {
	TrainingSummaryAdd(ctx context.Context, in *TrainingSummaryAddRequest, opts ...grpc.CallOption) (*TrainingSummaryCommonResponse, error)
	TrainingSummaryGetByTrainingName(ctx context.Context, in *TrainingSummaryGetByTrainingNameRequest, opts ...grpc.CallOption) (*TrainingSummaryResponse, error)
	TrainingSummaryGetByTrainDate(ctx context.Context, in *TrainingSummaryGetByTrainDateRequest, opts ...grpc.CallOption) (*TrainingSummaryResponse, error)
	TrainingSummaryGetByEvent(ctx context.Context, in *TrainingSummaryGetByEventRequest, opts ...grpc.CallOption) (*TrainingSummaryResponse, error)
}

type trainingSummaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingSummaryServiceClient(cc grpc.ClientConnInterface) TrainingSummaryServiceClient {
	return &trainingSummaryServiceClient{cc}
}

func (c *trainingSummaryServiceClient) TrainingSummaryAdd(ctx context.Context, in *TrainingSummaryAddRequest, opts ...grpc.CallOption) (*TrainingSummaryCommonResponse, error) {
	out := new(TrainingSummaryCommonResponse)
	err := c.cc.Invoke(ctx, "/idl.TrainingSummaryService/TrainingSummaryAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSummaryServiceClient) TrainingSummaryGetByTrainingName(ctx context.Context, in *TrainingSummaryGetByTrainingNameRequest, opts ...grpc.CallOption) (*TrainingSummaryResponse, error) {
	out := new(TrainingSummaryResponse)
	err := c.cc.Invoke(ctx, "/idl.TrainingSummaryService/TrainingSummaryGetByTrainingName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSummaryServiceClient) TrainingSummaryGetByTrainDate(ctx context.Context, in *TrainingSummaryGetByTrainDateRequest, opts ...grpc.CallOption) (*TrainingSummaryResponse, error) {
	out := new(TrainingSummaryResponse)
	err := c.cc.Invoke(ctx, "/idl.TrainingSummaryService/TrainingSummaryGetByTrainDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSummaryServiceClient) TrainingSummaryGetByEvent(ctx context.Context, in *TrainingSummaryGetByEventRequest, opts ...grpc.CallOption) (*TrainingSummaryResponse, error) {
	out := new(TrainingSummaryResponse)
	err := c.cc.Invoke(ctx, "/idl.TrainingSummaryService/TrainingSummaryGetByEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingSummaryServiceServer is the server API for TrainingSummaryService service.
// All implementations must embed UnimplementedTrainingSummaryServiceServer
// for forward compatibility
type TrainingSummaryServiceServer interface {
	TrainingSummaryAdd(context.Context, *TrainingSummaryAddRequest) (*TrainingSummaryCommonResponse, error)
	TrainingSummaryGetByTrainingName(context.Context, *TrainingSummaryGetByTrainingNameRequest) (*TrainingSummaryResponse, error)
	TrainingSummaryGetByTrainDate(context.Context, *TrainingSummaryGetByTrainDateRequest) (*TrainingSummaryResponse, error)
	TrainingSummaryGetByEvent(context.Context, *TrainingSummaryGetByEventRequest) (*TrainingSummaryResponse, error)
	mustEmbedUnimplementedTrainingSummaryServiceServer()
}

// UnimplementedTrainingSummaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainingSummaryServiceServer struct {
}

func (UnimplementedTrainingSummaryServiceServer) TrainingSummaryAdd(context.Context, *TrainingSummaryAddRequest) (*TrainingSummaryCommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingSummaryAdd not implemented")
}
func (UnimplementedTrainingSummaryServiceServer) TrainingSummaryGetByTrainingName(context.Context, *TrainingSummaryGetByTrainingNameRequest) (*TrainingSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingSummaryGetByTrainingName not implemented")
}
func (UnimplementedTrainingSummaryServiceServer) TrainingSummaryGetByTrainDate(context.Context, *TrainingSummaryGetByTrainDateRequest) (*TrainingSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingSummaryGetByTrainDate not implemented")
}
func (UnimplementedTrainingSummaryServiceServer) TrainingSummaryGetByEvent(context.Context, *TrainingSummaryGetByEventRequest) (*TrainingSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingSummaryGetByEvent not implemented")
}
func (UnimplementedTrainingSummaryServiceServer) mustEmbedUnimplementedTrainingSummaryServiceServer() {
}

// UnsafeTrainingSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingSummaryServiceServer will
// result in compilation errors.
type UnsafeTrainingSummaryServiceServer interface {
	mustEmbedUnimplementedTrainingSummaryServiceServer()
}

func RegisterTrainingSummaryServiceServer(s grpc.ServiceRegistrar, srv TrainingSummaryServiceServer) {
	s.RegisterService(&TrainingSummaryService_ServiceDesc, srv)
}

func _TrainingSummaryService_TrainingSummaryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingSummaryAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSummaryServiceServer).TrainingSummaryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.TrainingSummaryService/TrainingSummaryAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSummaryServiceServer).TrainingSummaryAdd(ctx, req.(*TrainingSummaryAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingSummaryService_TrainingSummaryGetByTrainingName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingSummaryGetByTrainingNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSummaryServiceServer).TrainingSummaryGetByTrainingName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.TrainingSummaryService/TrainingSummaryGetByTrainingName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSummaryServiceServer).TrainingSummaryGetByTrainingName(ctx, req.(*TrainingSummaryGetByTrainingNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingSummaryService_TrainingSummaryGetByTrainDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingSummaryGetByTrainDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSummaryServiceServer).TrainingSummaryGetByTrainDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.TrainingSummaryService/TrainingSummaryGetByTrainDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSummaryServiceServer).TrainingSummaryGetByTrainDate(ctx, req.(*TrainingSummaryGetByTrainDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingSummaryService_TrainingSummaryGetByEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingSummaryGetByEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSummaryServiceServer).TrainingSummaryGetByEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.TrainingSummaryService/TrainingSummaryGetByEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSummaryServiceServer).TrainingSummaryGetByEvent(ctx, req.(*TrainingSummaryGetByEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainingSummaryService_ServiceDesc is the grpc.ServiceDesc for TrainingSummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainingSummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idl.TrainingSummaryService",
	HandlerType: (*TrainingSummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrainingSummaryAdd",
			Handler:    _TrainingSummaryService_TrainingSummaryAdd_Handler,
		},
		{
			MethodName: "TrainingSummaryGetByTrainingName",
			Handler:    _TrainingSummaryService_TrainingSummaryGetByTrainingName_Handler,
		},
		{
			MethodName: "TrainingSummaryGetByTrainDate",
			Handler:    _TrainingSummaryService_TrainingSummaryGetByTrainDate_Handler,
		},
		{
			MethodName: "TrainingSummaryGetByEvent",
			Handler:    _TrainingSummaryService_TrainingSummaryGetByEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/trainingSummaryService.proto",
}
